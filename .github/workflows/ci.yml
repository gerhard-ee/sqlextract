name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.21.7']

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          go test -v -timeout 60s -race -json ./... > test-results.json
        else
          go test -v -timeout 60s -race -json -tags=!darwin ./... > test-results.json
        fi

    - name: Generate coverage
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          go test -v -timeout 60s -race -coverprofile=coverage.out -covermode=atomic ./...
        else
          go test -v -timeout 60s -race -coverprofile=coverage.out -covermode=atomic -tags=!darwin ./...
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ runner.os }}
        path: |
          test-results.json
          coverage.out
          **/test-results/*.xml
        retention-days: 7

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail-ci: false
        flags: ${{ runner.os }}

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.7'
          cache: true

      - name: Verify file structure
        run: |
          pwd
          ls -la
          ls -la cmd/sqlextract/

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 7 