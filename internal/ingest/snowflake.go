package ingest

import (
	"fmt"
)

type SnowflakeIngester struct{}

func NewSnowflakeIngester() Ingester {
	return &SnowflakeIngester{}
}

func (i *SnowflakeIngester) GenerateCSVIngestScript(sourcePath, targetTable string) (string, error) {
	script := fmt.Sprintf(`-- Snowflake CSV Ingestion Script
-- Generated by SQLExtract
-- Target Table: %s
-- Source File: %s

-- Create a file format for CSV
CREATE OR REPLACE FILE FORMAT csv_format
TYPE = 'CSV'
FIELD_DELIMITER = ','
SKIP_HEADER = 1
NULL_IF = ('NULL', 'null', '')
TRIM_SPACE = TRUE;

-- Create a stage for the file
CREATE OR REPLACE STAGE csv_stage
FILE_FORMAT = csv_format;

-- Upload the file to the stage
PUT file://%s @csv_stage
OVERWRITE = TRUE;

-- Load the data into the target table
COPY INTO %s
FROM @csv_stage
FILE_FORMAT = csv_format
ON_ERROR = 'CONTINUE'
FORCE = TRUE;

-- Clean up
DROP STAGE IF EXISTS csv_stage;
DROP FILE FORMAT IF EXISTS csv_format;`, targetTable, sourcePath, sourcePath, targetTable)

	return script, nil
}

func (i *SnowflakeIngester) GenerateParquetIngestScript(sourcePath, targetTable string) (string, error) {
	script := fmt.Sprintf(`-- Snowflake Parquet Ingestion Script
-- Generated by SQLExtract
-- Target Table: %s
-- Source File: %s

-- Create a file format for Parquet
CREATE OR REPLACE FILE FORMAT parquet_format
TYPE = 'PARQUET';

-- Create a stage for the file
CREATE OR REPLACE STAGE parquet_stage
FILE_FORMAT = parquet_format;

-- Upload the file to the stage
PUT file://%s @parquet_stage
OVERWRITE = TRUE;

-- Load the data into the target table
COPY INTO %s
FROM @parquet_stage
FILE_FORMAT = parquet_format
ON_ERROR = 'CONTINUE'
FORCE = TRUE;

-- Clean up
DROP STAGE IF EXISTS parquet_stage;
DROP FILE FORMAT IF EXISTS parquet_format;`, targetTable, sourcePath, sourcePath, targetTable)

	return script, nil
}
